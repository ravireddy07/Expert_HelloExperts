// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: AnimationTrigger.proto

#include "AnimationTrigger.pb.h"
#include "AnimationTrigger.grpc.pb.h"

#include <grpc++/async_unary_call.h>
#include <grpc++/channel_interface.h>
#include <grpc++/impl/client_unary_call.h>
#include <grpc++/impl/rpc_service_method.h>
#include <grpc++/impl/service_type.h>
#include <grpc++/stream.h>
namespace banksimulation {

static const char* BankSimulatorStateProxy_method_names[] = {
  "/banksimulation.BankSimulatorStateProxy/SendState",
};

std::unique_ptr< BankSimulatorStateProxy::Stub> BankSimulatorStateProxy::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel) {
  std::unique_ptr< BankSimulatorStateProxy::Stub> stub(new BankSimulatorStateProxy::Stub(channel));
  return stub;
}

BankSimulatorStateProxy::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : ::grpc::InternalStub(channel), rpcmethod_SendState_(BankSimulatorStateProxy_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel->RegisterMethod(BankSimulatorStateProxy_method_names[0]))
  {}

::grpc::Status BankSimulatorStateProxy::Stub::SendState(::grpc::ClientContext* context, const ::banksimulation::BankSimulatorState& request, ::banksimulation::ServerAck* response) {
  return ::grpc::BlockingUnaryCall(channel(), rpcmethod_SendState_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::banksimulation::ServerAck>* BankSimulatorStateProxy::Stub::AsyncSendStateRaw(::grpc::ClientContext* context, const ::banksimulation::BankSimulatorState& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::banksimulation::ServerAck>(channel(), cq, rpcmethod_SendState_, context, request);
}

BankSimulatorStateProxy::AsyncService::AsyncService() : ::grpc::AsynchronousService(BankSimulatorStateProxy_method_names, 1) {}

BankSimulatorStateProxy::Service::~Service() {
  delete service_;
}

::grpc::Status BankSimulatorStateProxy::Service::SendState(::grpc::ServerContext* context, const ::banksimulation::BankSimulatorState* request, ::banksimulation::ServerAck* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED);
}

void BankSimulatorStateProxy::AsyncService::RequestSendState(::grpc::ServerContext* context, ::banksimulation::BankSimulatorState* request, ::grpc::ServerAsyncResponseWriter< ::banksimulation::ServerAck>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
  AsynchronousService::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
}

::grpc::RpcService* BankSimulatorStateProxy::Service::service() {
  if (service_ != nullptr) {
    return service_;
  }
  service_ = new ::grpc::RpcService();
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      BankSimulatorStateProxy_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< BankSimulatorStateProxy::Service, ::banksimulation::BankSimulatorState, ::banksimulation::ServerAck>(
          std::mem_fn(&BankSimulatorStateProxy::Service::SendState), this),
      new ::banksimulation::BankSimulatorState, new ::banksimulation::ServerAck));
  return service_;
}


}  // namespace banksimulation

